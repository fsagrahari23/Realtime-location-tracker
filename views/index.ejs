<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Realtime Tracker</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      html,
      body {
        height: 100%;
        width: 100%;
        font-family: Arial, sans-serif;
      }

      .container {
        display: flex;
        height: 100%;
        width: 100%;
        background-color: #f5f5f5;
      }

      #map {
        flex: 3;
        height: 100%;
      }

      #chat-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        background-color: #ffffff;
        border-left: 1px solid #ccc;
        padding: 10px;
      }

      #chat-header {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
        text-align: center;
        background-color: #007bff;
        color: white;
        padding: 10px;
        border-radius: 4px;
      }

      #chat-box {
        flex: 1;
        overflow-y: auto;
        border: 1px solid #ccc;
        margin-bottom: 10px;
        padding: 10px;
        background-color: #f9f9f9;
        border-radius: 4px;
      }

      #chat-box p {
        margin-bottom: 8px;
        font-size: 14px;
      }

      #chat-input-container {
        display: flex;
        gap: 10px;
      }

      #chat-input {
        flex: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
      }

      #send-message {
        padding: 10px 15px;
        border: none;
        background-color: #007bff;
        color: white;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
      }

      #send-message:hover {
        background-color: #0056b3;
      }
    </style>
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin=""
    />
  </head>
  <body>
    <div class="container">
      <div id="map"></div>
      <div id="chat-container">
        <div id="chat-header">Chat</div>
        <div id="chat-box"></div>
        <div id="chat-input-container">
          <input id="chat-input" type="text" placeholder="Type a message..." />
          <button id="send-message">Send</button>
        </div>
      </div>
    </div>

    <script
      src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
      integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
      crossorigin=""
    ></script>

    <script
      src="https://cdn.socket.io/4.7.5/socket.io.min.js"
      integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
      crossorigin="anonymous"
    ></script>

    <script>
      const socket = io();
      const roomId = prompt("Enter Room ID:");
      socket.emit("join-room", roomId);

      let myMarker,
        otherMarkers = {},
        routeLayers = {};
      const map = L.map("map").setView([0, 0], 13);

      L.tileLayer("http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "OpenStreetMap",
      }).addTo(map);

      const chatBox = document.getElementById("chat-box");
      const chatInput = document.getElementById("chat-input");
      const sendMessageButton = document.getElementById("send-message");

      sendMessageButton.addEventListener("click", () => {
        const message = chatInput.value.trim();
        if (message) {
          socket.emit("message", { roomId, message });
          chatInput.value = "";
        }
      });

      socket.on("receive-message", (data) => {
        const { socketId, message } = data;
        chatBox.innerHTML += `<p><strong>${socketId}:</strong> ${message}</p>`;
        chatBox.scrollTop = chatBox.scrollHeight; // Scroll to the bottom
      });

      if (navigator.geolocation) {
        navigator.geolocation.watchPosition(
          (position) => {
            let { latitude, longitude } = position.coords;
            socket.emit("location", { roomId, latitude, longitude });

            if (!myMarker) {
              myMarker = L.marker([latitude, longitude]).addTo(map);
              map.setView([latitude, longitude], 13);
            } else {
              myMarker.setLatLng([latitude, longitude]);
            }
          },
          (err) => console.log(err),
          {
            enableHighAccuracy: true,
            timeout: 15000,
            maximumAge: 0,
          }
        );
      }

      socket.on("receive-location", async (data) => {
        const { socketId, latitude, longitude } = data;

        if (!otherMarkers[socketId]) {
          otherMarkers[socketId] = L.marker([latitude, longitude]).addTo(map);
        } else {
          otherMarkers[socketId].setLatLng([latitude, longitude]);
        }

        if (myMarker && otherMarkers[socketId]) {
          const myLatLng = myMarker.getLatLng();
          const otherLatLng = otherMarkers[socketId].getLatLng();

          const routeData = await fetchRoute(
            myLatLng.lat,
            myLatLng.lng,
            otherLatLng.lat,
            otherLatLng.lng
          );

          if (routeLayers[socketId]) {
            map.removeLayer(routeLayers[socketId]);
          }

          routeLayers[socketId] = L.geoJSON(routeData, {
            style: { color: "red", weight: 4 },
          }).addTo(map);
        }
      });

      socket.on("user-disconnect", (socketId) => {
        if (otherMarkers[socketId]) {
          map.removeLayer(otherMarkers[socketId]);
          delete otherMarkers[socketId];
        }
        if (routeLayers[socketId]) {
          map.removeLayer(routeLayers[socketId]);
          delete routeLayers[socketId];
        }
      });

      async function fetchRoute(lat1, lon1, lat2, lon2) {
        const url = `https://router.project-osrm.org/route/v1/driving/${lon1},${lat1};${lon2},${lat2}?overview=full&geometries=geojson`;
        const response = await fetch(url);
        const data = await response.json();
        return data.routes[0].geometry; // Return GeoJSON route geometry
      }
    </script>
  </body>
</html>
