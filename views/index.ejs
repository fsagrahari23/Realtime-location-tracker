<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      html,
      body {
        height: 100%;
        width: 100%;
      }
      #map {
        height: 100%;
        width: 100%;
      }
    </style>
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin=""
    />
  </head>
  <body>
    <div id="map"></div>
    <script
      src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
      integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
      crossorigin=""
    ></script>

    <script
      src="https://cdn.socket.io/4.7.5/socket.io.min.js"
      integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
      crossorigin="anonymous"
    ></script>
    <script>
      const socket = io();
      const roomId = prompt("Enter Room ID:"); // Prompt user to join a room
      socket.emit("join-room", roomId);

      let myMarker, otherMarker, routeLayer;
      const map = L.map("map").setView([0, 0], 13);

      L.tileLayer("http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "OpenStreetMap",
      }).addTo(map);

      if (navigator.geolocation) {
        navigator.geolocation.watchPosition(
          (position) => {
            let { latitude, longitude } = position.coords;
            socket.emit("location", { roomId, latitude, longitude });

            if (!myMarker) {
              myMarker = L.marker([latitude, longitude]).addTo(map);
              map.setView([latitude, longitude], 13);
            } else {
              myMarker.setLatLng([latitude, longitude]);
            }
          },
          (err) => console.log(err),
          {
            enableHighAccuracy: true,
            timeout: 15000,
            maximumAge: 0,
          }
        );
      }

      socket.on("receive-location", async (data) => {
        const { latitude, longitude } = data;

        if (!otherMarker) {
          otherMarker = L.marker([latitude, longitude], {
            color: "blue",
          }).addTo(map);
        } else {
          otherMarker.setLatLng([latitude, longitude]);
        }

        // Fetch route between the two users
        if (myMarker && otherMarker) {
          const myLatLng = myMarker.getLatLng();
          const otherLatLng = otherMarker.getLatLng();

          const routeData = await fetchRoute(
            myLatLng.lat,
            myLatLng.lng,
            otherLatLng.lat,
            otherLatLng.lng
          );

          if (routeLayer) {
            map.removeLayer(routeLayer);
          }

          // Add the route as a layer on the map
          routeLayer = L.geoJSON(routeData, {
            style: {
              color: "red",
              weight: 4,
            },
          }).addTo(map);
        }
      });

      socket.on("user-disconnect", () => {
        if (otherMarker) {
          map.removeLayer(otherMarker);
          otherMarker = null;
        }
        if (routeLayer) {
          map.removeLayer(routeLayer);
          routeLayer = null;
        }
      });

      // Fetch route using OSRM API
      async function fetchRoute(lat1, lon1, lat2, lon2) {
        const url = `https://router.project-osrm.org/route/v1/driving/${lon1},${lat1};${lon2},${lat2}?overview=full&geometries=geojson`;
        const response = await fetch(url);
        const data = await response.json();

        return data.routes[0].geometry; // Return GeoJSON route geometry
      }
    </script>
  </body>
</html>
